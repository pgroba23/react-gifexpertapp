{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACI,0BAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOhB,2BACEO,KAAK,OACLC,MAAQT,EACRU,SApBa,SAAEP,GACnBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAETC,EAFS,iDAEuCC,UAAWH,GAFlD,+DAGII,MAAOF,GAHX,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAePM,GAfO,4CAAH,sDCCL,SAASO,EAAT,GAAwC,IAAhBH,EAAe,EAAfA,MAAOV,EAAQ,EAARA,IAC1C,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,EAAN,MCFL,IAAMO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAd,GACHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,CAAEpB,IAKEqB,EDlB0BI,CAAczB,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAGrB,OACI,oCACI,wBAAIJ,UAAU,kBAAmBhB,GAE7BoB,GAAW,uBAAGJ,UAAU,kBAAb,aAEf,yBAAKA,UAAU,aAEHH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAACK,EAAD,eACIW,IAAOhB,EAAIC,IACPD,UEKrBiB,EArBM,WAAM,IAAD,EAEczC,mBAAS,CAAC,cAFxB,mBAEf0C,EAFe,KAEH3C,EAFG,KAItB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI0B,IAAM1B,EACNA,SAAYA,SCXlC6B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAEP,kBAAC,EAAD,MACAJ,I","file":"static/js/main.9754b346.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2)\r\n        {\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n          <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleChange }\r\n          />  \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async( category ) =>{\r\n\r\n        const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=0Nv0lXw05yJzrGxcR0RGNK90kz1MvxnA`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return({\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n\r\n            });\r\n        })\r\n        //console.log(gifs);\r\n        return( gifs );\r\n    }","import React from 'react'\r\n\r\nexport default function GifGridItem( { title, url } ) {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n   \r\n    return (\r\n        <>\r\n            <h2 className=\"animate__jello\">{ category }</h2>\r\n            {\r\n                loading && <p className=\"animate__flash\">Loading..</p>\r\n            }\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => \r\n                            <GifGridItem \r\n                                key= { img.id }\r\n                                {...img} //envia el contenido como parametro\r\n                            />\r\n                        )\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( img => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false,\r\n                })\r\n            })\r\n    }, [ category ]);\r\n    //     //useEffect es un Hook para que cada vez que se renderize la pagina, las funciones como en este caso getGifs\r\n    //     //se ejecuten solo una vez ante cada renderizacion, sino por cada cambio de estado, react generaria un nuevo\r\n    //     //array de Gifs. Los [] son para indicar que no tiene dependencias, si cambia category se vuelve llamar a get..\r\n\r\n    return state;\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category= { category }\r\n                        />\r\n                    ))\r\n                }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  divRoot\n\n);\n\n\n"],"sourceRoot":""}